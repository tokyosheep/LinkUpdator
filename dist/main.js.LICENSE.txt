/*
   * Flattens a rule set into valid CSS
   * Hashes it, wraps the whole chunk in a .hash1234 {}
   * Returns the hash to be injected on render()
   * */

/*
 ComponentStyle is all the CSS-specific stuff, not
 the React-specific stuff.
 */

/*
 Modernizr 3.0.0pre (Custom Build) | MIT
*/

/*   */

/* ! */

/* " */

/* # */

/* % */

/* & */

/* ' */

/* ( */

/* ) */

/* * */

/* + */

/* , */

/* - */

/* . */

/* / */

/* 0 */

/* 9 */

/* : */

/* ; */

/* < */

/* = */

/* > */

/* ? */

/* @ */

/* A */

/* Either execute or defer the function */

/* Handle objects */

/* Handle other components */

/* If config methods are called, wrap up a new template function and merge options */

/* Modify/inject new props at runtime */

/* This is callable directly as a template function */

/* This is the "capacity" of our alphabet i.e. 2x26 for all letters plus their capitalised
 * counterparts */

/* We depend on components having unique IDs */

/* Z */

/* Z+1 */

/* [ */

/* \ */

/* \f */

/* \n */

/* \r */

/* \t */

/* \u00A0 */

/* \uFEFF */

/* ] */

/* ^ */

/* _ */

/* ` */

/* a */

/* createRoot */

/* eslint-disable */

/* eslint-disable guard-for-in */

/* eslint-disable no-bitwise */

/* eslint-disable no-unused-vars */

/* eslint-disable no-unused-vars, prefer-destructuring */

/* eslint-disable valid-jsdoc, @typescript-eslint/no-unused-vars */

/* eslint-disable-next-line no-new */

/* eslint-enable guard-for-in */

/* eslint-enable no-unused-vars */

/* eslint-enable no-unused-vars, prefer-destructuring */

/* get a char and divide by alphabet-length */

/* global $Call */

/* global __REACT_DEVTOOLS_GLOBAL_HOOK__ */

/* harmony default export */

/* input a number, usually a hash and convert it to base-52 */

/* n */

/* o */

/* unused pure expression or super */

/* webpack/runtime/compat get default export */

/* webpack/runtime/create fake namespace object */

/* z */

/* { */

/* | */

/* } */

/*!
 * fill-range <https://github.com/jonschlinkert/fill-range>
 *
 * Copyright (c) 2014-present, Jon Schlinkert.
 * Licensed under the MIT License.
 */

/*!
 * is-extglob <https://github.com/jonschlinkert/is-extglob>
 *
 * Copyright (c) 2014-2016, Jon Schlinkert.
 * Licensed under the MIT License.
 */

/*!
 * is-glob <https://github.com/jonschlinkert/is-glob>
 *
 * Copyright (c) 2014-2017, Jon Schlinkert.
 * Released under the MIT License.
 */

/*!
 * is-number <https://github.com/jonschlinkert/is-number>
 *
 * Copyright (c) 2014-present, Jon Schlinkert.
 * Released under the MIT License.
 */

/*!
 * normalize-path <https://github.com/jonschlinkert/normalize-path>
 *
 * Copyright (c) 2014-2018, Jon Schlinkert.
 * Released under the MIT License.
 */

/*!
 * to-regex-range <https://github.com/micromatch/to-regex-range>
 *
 * Copyright (c) 2015-present, Jon Schlinkert.
 * Released under the MIT License.
 */

/*! regenerator-runtime -- Copyright (c) 2014-present, Facebook, Inc. -- license (MIT): https://github.com/facebook/regenerator/blob/main/LICENSE */

/*#__PURE__*/

/**
       * The minimal observable subscription method.
       * @param {Object} observer Any object that can be used as an observer.
       * The observer object should have a `next` method.
       * @returns {subscription} An object with an `unsubscribe` method that can
       * be used to unsubscribe the observable from the store, and prevent further
       * emission of values from the observable.
       */

/**
     * @type {'add'|'addDir'|'unlink'|'unlinkDir'}
     */

/**
     * Braces
     */

/**
     * Comma: ','
     */

/**
     * Commas
     */

/**
     * Dot: '.'
     */

/**
     * Dots
     */

/**
     * Double quotes
     */

/**
     * Escaped characters
     */

/**
     * Escaped chars
     */

/**
     * Exclamation
     */

/**
     * If we're inside a quoted string, continue
     * until we reach the closing double quote.
     */

/**
     * If we're inside a regex character class, continue
     * until we reach the closing bracket.
     */

/**
     * Invalid chars
     */

/**
     * Left curly brace: '{'
     */

/**
     * Left square bracket: '['
     */

/**
     * Parentheses
     */

/**
     * Pipes
     */

/**
     * Plain text
     */

/**
     * Plus
     */

/**
     * Question marks
     */

/**
     * Quotes: '|"|`
     */

/**
     * Right curly brace: '}'
     */

/**
     * Right square bracket (literal): ']'
     */

/**
     * Slashes
     */

/**
     * Square brackets
     */

/**
     * Stars
     */

/**
     * Text
     */

/**
   * @param {Path} dir
   * @param {Function} removeWatcher
   */

/**
   * @returns {Array<String>}
   */

/**
   * @type {Array<String>}
   */

/**
   * Adds a change listener. It will be called any time an action is dispatched,
   * and some part of the state tree may potentially have changed. You may then
   * call `getState()` to read the current state tree inside the callback.
   *
   * You may call `dispatch()` from a change listener, with the following
   * caveats:
   *
   * 1. The subscriptions are snapshotted just before every `dispatch()` call.
   * If you subscribe or unsubscribe while the listeners are being invoked, this
   * will not have any effect on the `dispatch()` that is currently in progress.
   * However, the next `dispatch()` call, whether nested or not, will use a more
   * recent snapshot of the subscription list.
   *
   * 2. The listener should not expect to see all state changes, as the state
   * might have been updated multiple times during a nested `dispatch()` before
   * the listener is called. It is, however, guaranteed that all subscribers
   * registered before the `dispatch()` started will be called with the latest
   * state by the time it exits.
   *
   * @param {Function} listener A callback to be invoked on every dispatch.
   * @returns {Function} A function to remove this change listener.
   */

/**
   * Create EXTGLOB_CHARS
   */

/**
   * Create GLOB_CHARS
   */

/**
   * Dispatches an action. It is the only way to trigger a state change.
   *
   * The `reducer` function, used to create the store, will be called with the
   * current state tree and the given `action`. Its return value will
   * be considered the **next** state of the tree, and the change listeners
   * will be notified.
   *
   * The base implementation only supports plain object actions. If you want to
   * dispatch a Promise, an Observable, a thunk, or something else, you need to
   * wrap your store creating function into the corresponding middleware. For
   * example, see the documentation for the `redux-thunk` package. Even the
   * middleware will eventually dispatch plain object actions using this method.
   *
   * @param {Object} action A plain object representing “what changed”. It is
   * a good idea to keep actions serializable so you can record and replay user
   * sessions, or use the time travelling `redux-devtools`. An action must have
   * a `type` property which may not be `undefined`. It is a good idea to use
   * string constants for action types.
   *
   * @returns {Object} For convenience, the same action object you dispatched.
   *
   * Note that, if you use a custom middleware, it may wrap `dispatch()` to
   * return something else (for example, a Promise you can await).
   */

/**
   * Fast paths
   */

/**
   * Helpers
   */

/**
   * Interoperability point for observable/reactive libraries.
   * @returns {observable} A minimal observable of state changes.
   * For more information, see the observable proposal:
   * https://github.com/tc39/proposal-observable
   */

/**
   * Reads the state tree managed by the store.
   *
   * @returns {any} The current state tree of your application.
   */

/**
   * Replaces the reducer currently used by the store to calculate the state.
   *
   * You might need this if your app implements code splitting and you want to
   * load some of the reducers dynamically. You might also need this if you
   * implement a hot reloading mechanism for Redux.
   *
   * @param {Function} nextReducer The reducer for the store to use instead.
   * @returns {void}
   */

/**
   * This makes a shallow copy of currentListeners so we can use
   * nextListeners as a temporary list while dispatching.
   *
   * This prevents any bugs around consumers calling
   * subscribe/unsubscribe in the middle of a dispatch.
   */

/**
   * Tokenize input until we reach end-of-string
   */

/**
   * Tokenizing helpers
   */

/**
  mixin-deep; https://github.com/jonschlinkert/mixin-deep
  Inlined such that it will be consistently transpiled to an IE-compatible syntax.

  The MIT License (MIT)

  Copyright (c) 2014-present, Jon Schlinkert.

  Permission is hereby granted, free of charge, to any person obtaining a copy
  of this software and associated documentation files (the "Software"), to deal
  in the Software without restriction, including without limitation the rights
  to use, copy, modify, merge, publish, distribute, sublicense, and/or sell
  copies of the Software, and to permit persons to whom the Software is
  furnished to do so, subject to the following conditions:

  The above copyright notice and this permission notice shall be included in
  all copies or substantial portions of the Software.

  THE SOFTWARE IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR
  IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,
  FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE
  AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER
  LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM,
  OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN
  THE SOFTWARE.
*/

/**
 *
 * @param {Path} newPath
 * @param {fs.Stats} stats
 */

/**
 *
 * @param {Path} path
 * @param {Function} closer
 */

/**
 * @deprecated
 *
 * **We recommend using the `configureStore` method
 * of the `@reduxjs/toolkit` package**, which replaces `createStore`.
 *
 * Redux Toolkit is our recommended approach for writing Redux logic today,
 * including store setup, reducers, data fetching, and more.
 *
 * **For more details, please read this Redux docs page:**
 * **https://redux.js.org/introduction/why-rtk-is-redux-today**
 *
 * `configureStore` from Redux Toolkit is an improved version of `createStore` that
 * simplifies setup and helps avoid common bugs.
 *
 * You should not be using the `redux` core package by itself today, except for learning purposes.
 * The `createStore` method from the core `redux` package will not be removed, but we encourage
 * all users to migrate to using Redux Toolkit for all Redux code.
 *
 * If you want to use `createStore` without this visual deprecation warning, use
 * the `legacy_createStore` import instead:
 *
 * `import { legacy_createStore as createStore} from 'redux'`
 *
 */

/**
 * @license React
 * react-dom.production.min.js
 *
 * Copyright (c) Facebook, Inc. and its affiliates.
 *
 * This source code is licensed under the MIT license found in the
 * LICENSE file in the root directory of this source tree.
 */

/**
 * @license React
 * react-is.production.min.js
 *
 * Copyright (c) Facebook, Inc. and its affiliates.
 *
 * This source code is licensed under the MIT license found in the
 * LICENSE file in the root directory of this source tree.
 */

/**
 * @license React
 * react.production.min.js
 *
 * Copyright (c) Facebook, Inc. and its affiliates.
 *
 * This source code is licensed under the MIT license found in the
 * LICENSE file in the root directory of this source tree.
 */

/**
 * @license React
 * scheduler.production.min.js
 *
 * Copyright (c) Facebook, Inc. and its affiliates.
 *
 * This source code is licensed under the MIT license found in the
 * LICENSE file in the root directory of this source tree.
 */

/**
 * @license React
 * use-sync-external-store-shim.production.min.js
 *
 * Copyright (c) Facebook, Inc. and its affiliates.
 *
 * This source code is licensed under the MIT license found in the
 * LICENSE file in the root directory of this source tree.
 */

/**
 * @license React
 * use-sync-external-store-shim/with-selector.production.min.js
 *
 * Copyright (c) Facebook, Inc. and its affiliates.
 *
 * This source code is licensed under the MIT license found in the
 * LICENSE file in the root directory of this source tree.
 */

/**
 * @mixin
 */

/**
 * @param {AnymatchPattern} matcher
 * @param {object} options
 * @returns {AnymatchFn}
 */

/**
 * @param {any} obj The object to inspect.
 * @returns {boolean} True if the argument appears to be a plain object.
 */

/**
 * @param {import("../index").FSWatcher} fsW
 */

/**
 * @param {import('../index').FSWatcher} fsw
 */

/**
 * @param {string} str
 * @param {Object} opts
 * @param {boolean} [opts.flipBackslashes=true]
 * @returns {string}
 */

/**
 * @type {Map<String,FsWatchContainer>}
 */

/**
 * @typedef {Object} FsWatchContainer
 * @property {Set} listeners
 * @property {Set} errHandlers
 * @property {Set} rawEmitters
 * @property {fs.FSWatcher=} watcher
 * @property {Boolean=} watcherUnusable
 */

/**
 * @typedef {Object} ReaddirpArguments
 * @property {Function=} fileFilter
 * @property {Function=} directoryFilter
 * @property {String=} type
 * @property {Number=} depth
 * @property {String=} root
 * @property {Boolean=} lstat
 * @property {Boolean=} bigint
 */

/**
 * @typedef {String} Path
 */

/**
 * A hook to access the redux `dispatch` function.
 *
 * @returns {any|function} redux store's `dispatch` function
 *
 * @example
 *
 * import React, { useCallback } from 'react'
 * import { useDispatch } from 'react-redux'
 *
 * export const CounterComponent = ({ value }) => {
 *   const dispatch = useDispatch()
 *   const increaseCounter = useCallback(() => dispatch({ type: 'increase-counter' }), [])
 *   return (
 *     <div>
 *       <span>{value}</span>
 *       <button onClick={increaseCounter}>Increase counter</button>
 *     </div>
 *   )
 * }
 */

/**
 * A hook to access the redux store's state. This hook takes a selector function
 * as an argument. The selector is called with the store state.
 *
 * This hook takes an optional equality comparison function as the second parameter
 * that allows you to customize the way the selected state is compared to determine
 * whether the component needs to be re-rendered.
 *
 * @param {Function} selector the selector function
 * @param {Function=} equalityFn the function that will be used to determine equality
 *
 * @returns {any} the selected state
 *
 * @example
 *
 * import React from 'react'
 * import { useSelector } from 'react-redux'
 *
 * export const CounterComponent = () => {
 *   const counter = useSelector(state => state.counter)
 *   return <div>{counter}</div>
 * }
 */

/**
 * A hook to access the redux store.
 *
 * @returns {any} the redux store
 *
 * @example
 *
 * import React from 'react'
 * import { useStore } from 'react-redux'
 *
 * export const ExampleComponent = () => {
 *   const store = useStore()
 *   return <div>{store.getState()}</div>
 * }
 */

/**
 * A hook to access the value of the `ReactReduxContext`. This is a low-level
 * hook that you should usually not need to call directly.
 *
 * @returns {any} the value of the `ReactReduxContext`
 *
 * @example
 *
 * import React from 'react'
 * import { useReduxContext } from 'react-redux'
 *
 * export const CounterComponent = () => {
 *   const { store } = useReduxContext()
 *   return <div>{store.getState()}</div>
 * }
 */

/**
 * Adapted from React: https://github.com/facebook/react/blob/master/packages/shared/formatProdErrorMessage.js
 *
 * Do not require this module directly! Use normal throw error calls. These messages will be replaced with error codes
 * during build.
 * @param {number} code
 */

/**
 * Adds paths to be watched on an existing FSWatcher instance
 * @param {Path|Array<Path>} paths_
 * @param {String=} _origAdd private; for handling non-existent paths to be watched
 * @param {Boolean=} _internal private; indicates a non-user add
 * @returns {FSWatcher} for chaining
 */

/**
 * Awaits write operation to finish.
 * Polls a newly created file for size variations. When files size does not change for 'threshold' milliseconds calls callback.
 * @param {Path} path being acted upon
 * @param {Number} threshold Time in milliseconds a file size must be fixed before acknowledging write OP is finished
 * @param {EventName} event
 * @param {Function} awfEmit Callback to be called when ready for event to be emitted.
 */

/**
 * Cache
 */

/**
 * Check for read permissions.
 * Based on this answer on SO: https://stackoverflow.com/a/11781404/1358405
 * @param {fs.Stats} stats - object, result of fs_stat
 * @returns {Boolean} indicates whether the file can be read
*/

/**
 * Close watchers and remove all listeners from watched paths.
 * @returns {Promise<void>}.
*/

/**
 * Close watchers or start ignoring events from specified paths.
 * @param {Path|Array<Path>} paths_ - string or array of strings, file/directory paths and/or globs
 * @returns {FSWatcher} for chaining
*/

/**
 * Closes all watchers for a path
 * @param {Path} path
 */

/**
 * Closes only file-specific watchers
 * @param {Path} path
 */

/**
 * Common handler for errors
 * @param {Error} error
 * @returns {Error|Boolean} The error if defined, otherwise the value of the FSWatcher instance's `closed` flag
 */

/**
 * Compile a regular expression from the `state` object returned by the
 * [parse()](#parse) method.
 *
 * @param {Object} `state`
 * @param {Object} `options`
 * @param {Boolean} `returnOutput` Intended for implementors, this argument allows you to return the raw output from the parser.
 * @param {Boolean} `returnState` Adds the state to a `state` property on the returned regex. Useful for implementors and debugging.
 * @return {RegExp}
 * @api public
 */

/**
 * Compiles a brace pattern into a regex-compatible, optimized string.
 * This method is called by the main [braces](#braces) function by default.
 *
 * ```js
 * const braces = require('braces');
 * console.log(braces.compile('a/{b,c}/d'));
 * //=> ['a/(b|c)/d']
 * ```
 * @param {String} `input` Brace pattern or AST.
 * @param {Object} `options`
 * @return {Array} Returns an array of expanded values.
 * @api public
 */

/**
 * Composes single-argument functions from right to left. The rightmost
 * function can take multiple arguments as it provides the signature for
 * the resulting composite function.
 *
 * @param {...Function} funcs The functions to compose.
 * @returns {Function} A function obtained by composing the argument functions
 * from right to left. For example, compose(f, g, h) is identical to doing
 * (...args) => f(g(h(...args))).
 */

/**
 * Constants
 */

/**
 * Convenience function for joining strings to form className chains
 */

/**
 * Convert a range to a regex pattern
 * @param {Number} `start`
 * @param {Number} `stop`
 * @return {String}
 */

/**
 * Copyright 2015, Yahoo! Inc.
 * Copyrights licensed under the New BSD License. See the accompanying LICENSE file for terms.
 */

/**
 * Create a regular expression from a parsed glob pattern.
 *
 * ```js
 * const picomatch = require('picomatch');
 * const state = picomatch.parse('*.js');
 * // picomatch.compileRe(state[, options]);
 *
 * console.log(picomatch.compileRe(state));
 * //=> /^(?:(?!\.)(?=.)[^/]*?\.js)$/
 * ```
 * @param {String} `state` The object returned from the `.parse` method.
 * @param {Object} `options`
 * @param {Boolean} `returnOutput` Implementors may use this argument to return the compiled output, instead of a regular expression. This is not exposed on the options to prevent end-users from mutating the result.
 * @param {Boolean} `returnState` Implementors may use this argument to return the state from the parsed glob with the returned regular expression.
 * @return {RegExp} Returns a regex created from the given pattern.
 * @api public
 */

/**
 * Create a regular expression from the given regex source string.
 *
 * ```js
 * const picomatch = require('picomatch');
 * // picomatch.toRegex(source[, options]);
 *
 * const { output } = picomatch.parse('*.js');
 * console.log(picomatch.toRegex(output));
 * //=> /^(?:(?!\.)(?=.)[^/]*?\.js)$/
 * ```
 * @param {String} `source` Regular expression source string.
 * @param {Object} `options`
 * @return {RegExp}
 * @api public
 */

/**
 * Create an error file out of errors.md for development and a simple web link to the full errors
 * in production mode.
 */

/**
 * Creates a Redux store that holds the state tree.
 *
 * **We recommend using `configureStore` from the
 * `@reduxjs/toolkit` package**, which replaces `createStore`:
 * **https://redux.js.org/introduction/why-rtk-is-redux-today**
 *
 * The only way to change the data in the store is to call `dispatch()` on it.
 *
 * There should only be a single store in your app. To specify how different
 * parts of the state tree respond to actions, you may combine several reducers
 * into a single reducer function by using `combineReducers`.
 *
 * @param {Function} reducer A function that returns the next state tree, given
 * the current state tree and the action to handle.
 *
 * @param {any} [preloadedState] The initial state. You may optionally specify it
 * to hydrate the state from the server in universal apps, or to restore a
 * previously serialized user session.
 * If you use `combineReducers` to produce the root reducer function, this must be
 * an object with the same shape as `combineReducers` keys.
 *
 * @param {Function} [enhancer] The store enhancer. You may optionally specify it
 * to enhance the store with third-party capabilities such as middleware,
 * time travel, persistence, etc. The only store enhancer that ships with Redux
 * is `applyMiddleware()`.
 *
 * @returns {Store} A Redux store that lets you read the state, dispatch actions
 * and subscribe to changes.
 */

/**
 * Creates a braces string from an AST, or an AST node.
 *
 * ```js
 * const braces = require('braces');
 * let ast = braces.parse('foo/{a,b}/bar');
 * console.log(stringify(ast.nodes[2])); //=> '{a,b}'
 * ```
 * @param {String} `input` Brace pattern or AST.
 * @param {Object} `options`
 * @return {Array} Returns an array of expanded values.
 * @api public
 */

/**
 * Creates a matcher function from one or more glob patterns. The
 * returned function takes a string to match as its first argument,
 * and returns true if the string is a match. The returned matcher
 * function also takes a boolean as the second argument that, when true,
 * returns an object with additional information.
 *
 * ```js
 * const picomatch = require('picomatch');
 * // picomatch(glob[, options]);
 *
 * const isMatch = picomatch('*.!(*a)');
 * console.log(isMatch('a.a')); //=> false
 * console.log(isMatch('a.b')); //=> true
 * ```
 * @name picomatch
 * @param {String|Array} `globs` One or more glob patterns.
 * @param {Object=} `options`
 * @return {Function=} Returns a matcher function.
 * @api public
 */

/**
 * Creates a store enhancer that applies middleware to the dispatch method
 * of the Redux store. This is handy for a variety of tasks, such as expressing
 * asynchronous actions in a concise manner, or logging every action payload.
 *
 * See `redux-thunk` package as an example of the Redux middleware.
 *
 * Because middleware is potentially asynchronous, this should be the first
 * store enhancer in the composition chain.
 *
 * Note that each middleware will be given the `dispatch` and `getState` functions
 * as named arguments.
 *
 * @param {...Function} middlewares The middleware chain to be applied.
 * @returns {Function} A store enhancer applying the middleware.
 */

/**
 * Determines whether user has asked to ignore this path.
 * @param {Path} path filepath or dir
 * @param {fs.Stats=} stats result of fs.stat
 * @returns {Boolean}
 */

/**
 * Directory entry.
 * @property {Path} path
 * @property {Set<Path>} items
 */

/**
 * Escape the given node with '\\' before node.value
 */

/**
 * Expands a brace pattern into an array. This method is called by the
 * main [braces](#braces) function when `options.expand` is true. Before
 * using this method it's recommended that you read the [performance notes](#performance))
 * and advantages of using [.compile](#compile) instead.
 *
 * ```js
 * const braces = require('braces');
 * console.log(braces.expand('a/{b,c}/d'));
 * //=> ['a/b/d', 'a/c/d'];
 * ```
 * @param {String} `pattern` Brace pattern
 * @param {Object} `options`
 * @return {Array} Returns an array of expanded values.
 * @api public
 */

/**
 * Expose "braces"
 */

/**
 * Expose "picomatch"
 */

/**
 * Expose `toRegexRange`
 */

/**
 * Expose list of watched paths
 * @returns {Object} for chaining
*/

/**
 * Fast paths for creating regular expressions for common glob patterns.
 * This can significantly speed up processing and has very little downside
 * impact when none of the fast paths match.
 */

/**
 * Find a node of the given type
 */

/**
 * Flatten an array
 */

/**
 * Handle added file, directory, or glob pattern.
 * Delegates call to _handleFile / _handleDir after checks.
 * @param {String} path to file or ir
 * @param {Boolean} initialAdd was the file added at watch instantiation?
 * @param {Object} priorWh depth relative to user-supplied path
 * @param {Number} depth Child path actually targeted for watch
 * @param {String=} target Child path actually targeted for watch
 * @returns {Promise}
 */

/**
 * Handle added path with fsevents
 * @param {String} path file/dir path or glob pattern
 * @param {Function|Boolean=} transform converts working path to what the user expects
 * @param {Boolean=} forceAdd ensure add is emitted
 * @param {Number=} priorDepth Level of subdirectories already traversed.
 * @returns {Promise<void>}
 */

/**
 * Handle symlinks encountered during directory scan
 * @param {String} linkPath path to symlink
 * @param {String} fullPath absolute path to the symlink
 * @param {Function} transform pre-existing path transformer
 * @param {Number} curDepth level of subdirectories traversed to where symlink is
 * @returns {Promise<void>}
 */

/**
 * Handle symlinks encountered during directory scan
 * @param {String} watchPath  - file/dir path to be watched with fsevents
 * @param {String} realPath   - real path (in case of symlinks)
 * @param {Function} transform  - path transformer
 * @param {Function} globFilter - path filter in case a glob pattern was provided
 * @returns {Function} closer for the watcher instance
*/

/**
 * Handle symlinks encountered while reading a dir.
 * @param {Object} entry returned by readdirp
 * @param {String} directory path of dir being read
 * @param {String} path of this item
 * @param {String} item basename of this item
 * @returns {Promise<Boolean>} true if no more processing is needed for this entry.
 */

/**
 * Handles emitting unlink events for
 * files and directories, and via recursion, for
 * files and directories within directories that are unlinked
 * @param {String} directory within which the following item is located
 * @param {String} item      base path of item/directory
 * @returns {void}
*/

/**
 * Helper for passing fs_watch event data to a collection of listeners
 * @param {Path} fullPath absolute path bound to fs_watch instance
 * @param {String} type listener type
 * @param {*=} val1 arguments to be passed to listeners
 * @param {*=} val2
 * @param {*=} val3
 */

/**
 * Helper utility for throttling
 * @param {ThrottleType} actionType type being throttled
 * @param {Path} path being acted upon
 * @param {Number} timeout duration of time to suppress duplicate actions
 * @returns {Object|false} tracking object or false if action should be suppressed
 */

/**
 * Hook factory, which creates a `useDispatch` hook bound to a given context.
 *
 * @param {React.Context} [context=ReactReduxContext] Context passed to your `<Provider>`.
 * @returns {Function} A `useDispatch` hook bound to the specified context.
 */

/**
 * Hook factory, which creates a `useSelector` hook bound to a given context.
 *
 * @param {React.Context} [context=ReactReduxContext] Context passed to your `<Provider>`.
 * @returns {Function} A `useSelector` hook bound to the specified context.
 */

/**
 * Hook factory, which creates a `useStore` hook bound to a given context.
 *
 * @param {React.Context} [context=ReactReduxContext] Context passed to your `<Provider>`.
 * @returns {Function} A `useStore` hook bound to the specified context.
 */

/**
 * Hyphenates a camelcased CSS property name, for example:
 *
 *   > hyphenateStyleName('backgroundColor')
 *   < "background-color"
 *   > hyphenateStyleName('MozTransition')
 *   < "-moz-transition"
 *   > hyphenateStyleName('msTransition')
 *   < "-ms-transition"
 *
 * As Modernizr suggests (http://modernizr.com/docs/#prefixed), an `ms` prefix
 * is converted to `-ms-`.
 *
 * @param {string} string
 * @return {string}
 */

/**
 * Instantiates the fs_watch interface
 * @param {String} path to be watched
 * @param {Object} options to be passed to fs_watch
 * @param {Function} listener main event handler
 * @param {Function} errHandler emits info about errors
 * @param {Function} emitRaw emits raw event data
 * @returns {fs.FSWatcher} new fsevents instance
 */

/**
 * Instantiates the fs_watch interface or binds listeners
 * to an existing one covering the same file system entry
 * @param {String} path
 * @param {String} fullPath absolute path
 * @param {Object} options to be passed to fs_watch
 * @param {Object} handlers container for event listener functions
 */

/**
 * Instantiates the fsevents interface or binds listeners to an existing one covering
 * the same file tree.
 * @param {Path} path           - to be watched
 * @param {Path} realPath       - real path for symlinks
 * @param {Function} listener   - called when fsevents emits events
 * @param {Function} rawEmitter - passes data to listeners of the 'raw' event
 * @returns {Function} closer
 */

/**
 * It's falsish not falsy because 0 is allowed.
 */

/**
 * MIT License
 *
 * Copyright (c) 2016 Sultan Tarimo
 *
 * Permission is hereby granted, free of charge, to any person obtaining a copy of
 * this software and associated documentation files (the "Software"),
 * to deal in the Software without restriction, including without limitation the rights to use, copy, modify, merge, publish, distribute, sublicense, and/or
 * sell copies of the Software and to permit persons to whom the Software is furnished to do so, subject to the following conditions:
 *
 * The above copyright notice and this permission notice shall be included in all
 * copies or substantial portions of the Software.
 *
 * THE SOFTWARE IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND, EXPRESS
 * OR IMPLIED INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,
 * FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE
 * AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER LIABILITY,
 * WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM, OUT OF OR
 * IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN THE SOFTWARE.
 */

/**
 * Main function which ends up calling readdirRec and reads all files and directories in given root recursively.
 * @param {String} root Root directory
 * @param {ReaddirpArguments=} options Options to specify root (start directory), filters and recursion depth
 */

/**
 * Match the basename of a filepath.
 *
 * ```js
 * const picomatch = require('picomatch');
 * // picomatch.matchBase(input, glob[, options]);
 * console.log(picomatch.matchBase('foo/bar.js', '*.js'); // true
 * ```
 * @param {String} `input` String to test.
 * @param {RegExp|String} `glob` Glob pattern or regex created by [.makeRe](#makeRe).
 * @return {Boolean}
 * @api public
 */

/**
 * Normalize and emit events.
 * Calling _emit DOES NOT MEAN emit() would be called!
 * @param {EventName} event Type of event
 * @param {Path} path File or directory path
 * @param {*=} val1 arguments to be passed with event
 * @param {*=} val2
 * @param {*=} val3
 * @returns the error if defined, otherwise the value of the FSWatcher instance's `closed` flag
 */

/**
 * Parse a glob pattern to create the source string for a regular
 * expression.
 *
 * ```js
 * const picomatch = require('picomatch');
 * const result = picomatch.parse(pattern[, options]);
 * ```
 * @param {String} `pattern`
 * @param {Object} `options`
 * @return {Object} Returns an object with useful properties and output to be used as a regex source string.
 * @api public
 */

/**
 * Parse the given `str` with the given `options`.
 *
 * ```js
 * // braces.parse(pattern, [, options]);
 * const ast = braces.parse('a/{b,c}/d');
 * console.log(ast);
 * ```
 * @param {String} pattern Brace pattern to parse
 * @param {Object} options
 * @return {Object} Returns an AST
 * @api public
 */

/**
 * Picomatch constants.
 * @return {Object}
 */

/**
 * Posix glob regex
 */

/**
 * Processes a brace pattern and returns either an expanded array
 * (if `options.expand` is true), a highly optimized regex-compatible string.
 * This method is called by the main [braces](#braces) function.
 *
 * ```js
 * const braces = require('braces');
 * console.log(braces.create('user-{200..300}/project-{a,b,c}-{1..10}'))
 * //=> 'user-(20[0-9]|2[1-9][0-9]|300)/project-(a|b|c)-([1-9]|10)'
 * ```
 * @param {String} `pattern` Brace pattern
 * @param {Object} `options`
 * @return {Array} Returns an array of expanded values.
 * @api public
 */

/**
 * Provides a set of common helpers and properties relating to symlink and glob handling.
 * @param {Path} path file, directory, or glob pattern being watched
 * @param {Number=} depth at any depth > 0, this isn't a glob
 * @returns {WatchHelper} object containing helpers for this path
 */

/**
 * Provides directory tracking objects
 * @param {String} directory path of the directory
 * @returns {DirEntry} the directory's tracking object
 */

/**
 * Read directory to add / remove files from `@watched` list and re-read it on change.
 * @param {String} dir fs path
 * @param {fs.Stats} stats
 * @param {Boolean} initialAdd
 * @param {Number} depth relative to user-supplied path
 * @param {String} target child path targeted for watch
 * @param {Object} wh Common watch helpers for this path
 * @param {String} realpath
 * @returns {Promise<Function>} closer for the watcher instance.
 */

/**
 * Reduce an array of text nodes.
 */

/**
 * Returns true if **any** of the given glob `patterns` match the specified `string`.
 *
 * ```js
 * const picomatch = require('picomatch');
 * // picomatch.isMatch(string, patterns[, options]);
 *
 * console.log(picomatch.isMatch('a.a', ['b.*', '*.a'])); //=> true
 * console.log(picomatch.isMatch('a.a', 'b.*')); //=> false
 * ```
 * @param {String|Array} str The string to test.
 * @param {String|Array} patterns One or more glob patterns to use for matching.
 * @param {Object} [options] See available [options](#options).
 * @return {Boolean} Returns true if any patterns match `str`
 * @api public
 */

/**
 * Returns true if a brace node is invalid.
 */

/**
 * Returns true if a node is an open or close node
 */

/**
 * Returns true if the given brace node should be enclosed in literal braces
 */

/**
 * Scan a glob pattern to separate the pattern into segments.
 *
 * ```js
 * const picomatch = require('picomatch');
 * // picomatch.scan(input[, options]);
 *
 * const result = picomatch.scan('!./foo/*.js');
 * console.log(result);
 * { prefix: '!./',
 *   input: '!./foo/*.js',
 *   start: 3,
 *   base: 'foo',
 *   glob: '*.js',
 *   isBrace: false,
 *   isBracket: false,
 *   isGlob: true,
 *   isExtglob: false,
 *   isGlobstar: false,
 *   negated: true }
 * ```
 * @param {String} `input` Glob pattern to scan.
 * @param {Object} `options`
 * @return {Object} Returns an object with
 * @api public
 */

/**
 * TODO: Explore using CSS.escape when it becomes more available
 * in evergreen browsers.
 */

/**
 * Test `input` with the given `regex`. This is used by the main
 * `picomatch()` function to test the input string.
 *
 * ```js
 * const picomatch = require('picomatch');
 * // picomatch.test(input, regex[, options]);
 *
 * console.log(picomatch.test('foo/bar', /^(?:([^/]*?)\/([^/]*?))$/));
 * // { isMatch: true, match: [ 'foo/', 'foo', 'bar' ], output: 'foo/bar' }
 * ```
 * @param {String} `input` String to test.
 * @param {RegExp} `regex`
 * @return {Object} Returns an object with matching info.
 * @api public
 */

/**
 * These are private action types reserved by Redux.
 * For any unknown actions, you must return the current state.
 * If the current state is undefined, you must return the initial state.
 * Do not reference these action types directly in your code.
 */

/**
 * Turns an object whose values are different reducer functions, into a single
 * reducer function. It will call every child reducer, and gather their results
 * into a single state object, whose keys correspond to the keys of the passed
 * reducer functions.
 *
 * @param {Object} reducers An object whose values correspond to different
 * reducer functions that need to be combined into one. One handy way to obtain
 * it is to use ES6 `import * as reducers` syntax. The reducers may never return
 * undefined for any action. Instead, they should return their initial state
 * if the state passed to them was undefined, and the current state for any
 * unrecognized action.
 *
 * @returns {Function} A reducer function that invokes every reducer inside the
 * passed object, and builds a state object with the same shape.
 */

/**
 * Watch a file and emit add event if warranted.
 * @param {Path} file Path
 * @param {fs.Stats} stats result of fs_stat
 * @param {Boolean} initialAdd was the file added at watch instantiation?
 * @returns {Function} closer for the watcher instance
 */

/**
 * Watch file for changes with fs_watchFile or fs_watch.
 * @param {String} path to file or dir
 * @param {Function} listener on fs change
 * @returns {Function} closer for the watcher instance
 */

/**
 * Watches files & directories for changes. Emitted events:
 * `add`, `addDir`, `change`, `unlink`, `unlinkDir`, `all`, `error`
 *
 *     new FSWatcher()
 *       .add(directories)
 *       .on('add', path => log('File', path, 'was added'))
 */

/**
 * Zip strings
 */

/**
 * inlined version of
 * https://github.com/facebook/fbjs/blob/master/packages/fbjs/src/core/hyphenateStyleName.js
 */

/** @class */

/** @license React v16.13.1
 * react-is.production.min.js
 *
 * Copyright (c) Facebook, Inc. and its affiliates.
 *
 * This source code is licensed under the MIT license found in the
 * LICENSE file in the root directory of this source tree.
 */

/** @type Array<any> */

/** @type {Map<Path, Object>} */

/** @type {Map<Path, String|Boolean>} */

/** @type {Map<String, Array>} */

/** @type {Map<String, DirEntry>} */

/** @type {Map<ThrottleType, Map>} */

/** @type {Object} */

/** @type {Set<Path>} */

/** @type {Set<String>} */

/** @type {fs.FSWatcher=} */

/** @type {object|boolean} */

/** A function that accepts a potential "extra argument" value to be injected later,
 * and returns an instance of the thunk middleware that uses that value
 */

/** Check whether a name is known for caching */

/** Clears all cached names for a given group ID */

/** Clears all rules for a given group ID */

/** Clears the entire tag which deletes all rules but not its names */

/** Insert new rules which also marks the name as known */

/** Lazily initialises a GroupedTag for when it's actually needed */

/** Mark a group's name as known for caching */

/** Outputs the current sheet as a CSS string with markers for SSR */

/** Register a group ID to give it an index */

/************************************************************************/

/******/

/***/

/*break*/

/*return*/

/*yield*/

//

// 

// "Upgrade" the watcher to persistence or a quicker interval.

// $FlowFixMe

// $FlowFixMe this is a forced cast to merge it StyledComponentWrapperProperties

// $FlowFixMe: Not typed to avoid destructuring arguments

// (https://github.com/paulmillr/chokidar/blob/e1753ddbc9571bdc33b4a4af172d52cb6e611c10/lib/nodefs-handler.js#L612),

// (may be shared across chokidar FSWatcher instances)

// (other than symlinks being followed, which will be tracked soon)

// ------------

// --------------

// -----------------

// @font-face, @page

// @import

// @ts-ignore

// @ts-ignore 'AnyAction' is assignable to the constraint of type 'A', but 'A' could be instantiated with a different subtype

// Allow injecting another batching function later

// Alphabet chars.

// Always default to polling on IBM i because fs.watch() is not available on IBM i.

// Any non-magical string (`.ts`) or even nested expression (`.{ts,tsx}`) can follow after the closing parenthesis.

// Any reducers that existed in both the new and old rootReducer

// Attach the factory function so users can create a customized version

// Avoid Edge bug where empty style elements don't create sheets

// Avoid Firefox quirk where the style element might not have a sheet property

// Avoid IE11 quirk where cssText is inaccessible on some invalid rules

// Avoid conflicts if we later create another file with the same name

// Avoid failures from read-only properties

// Because of that, the useSyncExternalStore compat shim is needed.

// CONCATENATED MODULE: ./node_modules/@babel/runtime/helpers/esm/defineProperty.js

// CONCATENATED MODULE: ./node_modules/@babel/runtime/helpers/esm/objectSpread2.js

// CONCATENATED MODULE: ./node_modules/@babel/runtime/helpers/esm/toPrimitive.js

// CONCATENATED MODULE: ./node_modules/@babel/runtime/helpers/esm/toPropertyKey.js

// CONCATENATED MODULE: ./node_modules/@babel/runtime/helpers/esm/typeof.js

// CONCATENATED MODULE: ./node_modules/@emotion/is-prop-valid/dist/is-prop-valid.esm.js

// CONCATENATED MODULE: ./node_modules/@emotion/memoize/dist/memoize.esm.js

// CONCATENATED MODULE: ./node_modules/@emotion/stylis/dist/stylis.esm.js

// CONCATENATED MODULE: ./node_modules/@reduxjs/toolkit/dist/redux-toolkit.esm.js

// CONCATENATED MODULE: ./node_modules/immer/dist/immer.esm.mjs

// CONCATENATED MODULE: ./node_modules/react-redux/es/components/Provider.js

// CONCATENATED MODULE: ./node_modules/react-redux/es/hooks/useDispatch.js

// CONCATENATED MODULE: ./node_modules/react-redux/es/hooks/useReduxContext.js

// CONCATENATED MODULE: ./node_modules/react-redux/es/hooks/useSelector.js

// CONCATENATED MODULE: ./node_modules/react-redux/es/hooks/useStore.js

// CONCATENATED MODULE: ./node_modules/react-redux/es/index.js

// CONCATENATED MODULE: ./node_modules/react-redux/es/utils/Subscription.js

// CONCATENATED MODULE: ./node_modules/react-redux/es/utils/batch.js

// CONCATENATED MODULE: ./node_modules/react-redux/es/utils/useIsomorphicLayoutEffect.js

// CONCATENATED MODULE: ./node_modules/redux-thunk/es/index.js

// CONCATENATED MODULE: ./node_modules/redux/es/redux.js

// CONCATENATED MODULE: ./node_modules/styled-components/dist/styled-components.esm.js

// CONCATENATED MODULE: ./src/fileSystem/init.js

// CONCATENATED MODULE: ./src/pages/layout.tsx

// CONCATENATED MODULE: ./src/redux/app/hooks.ts

// CONCATENATED MODULE: ./src/redux/features/overlayer/overLayerSlice.ts

// CONCATENATED MODULE: ./src/styles/container.ts

// Check `path` instead of `absPath` because the cwd portion can't be a glob

// Check if item was on the watched list and remove it

// Check if module is in cache

// Check that change event was not fired because of changed only accessTime.

// Check to protect against issue gh-730.

// Common helpers

// Copied from https://github.com/facebook/regenerator/blob/main/packages/runtime/runtime.js#L736=

// Create a new module (and put it into the cache)

// DCE check should happen before ReactDOM bundle executes so that

// Decide whether or not we should start a new higher-level

// Default to a dummy "batch" implementation that just runs the callback

// DevTools can report bad minification during injection.

// Digits

// Directory helpers

// Disabling the `fastpaths` option due to a problem with parsing strings as `.ts` in the pattern like `**/!(*.d).ts`.

// Don't pass through non HTML tags through to HTML elements

// EXTERNAL MODULE: ./node_modules/@babel/runtime/helpers/classCallCheck.js

// EXTERNAL MODULE: ./node_modules/hoist-non-react-statics/dist/hoist-non-react-statics.cjs.js

// EXTERNAL MODULE: ./node_modules/react-dom/client.js

// EXTERNAL MODULE: ./node_modules/react/index.js

// Editor atomic write normalization enabled by default with fs.watch

// Enable batched updates in our subscriptions for use

// Enable fsevents on OS X when polling isn't explicitly enabled.

// Ensure that no displayName can lead to duplicate componentIds

// Execute the module function

// Export FSWatcher class

// FSEVENT_CLONED,

// File helpers

// Files that absent in current directory snapshot

// Files that present in current directory snapshot

// Fix issues where mtime is null but file is still present

// Fixes issue #1042 -> Relative paths were detected and added as symlinks

// Global override (useful for end-developers that need to force polling for all

// If this "action" is really a function, call it and return the result.

// If we wait for this file to be fully written, cancel the wait.

// If we've accumulated a substantial number of paths that

// In this case, we need to parse the string and use it in the output of the original pattern.

// Initialize with proper watcher.

// Inlined / shortened version of `kindOf` from https://github.com/jonschlinkert/kind-of

// Inlined version of the `symbol-observable` polyfill

// Launch stream with one parent, the root dir.

// Mark imbalanced braces and brackets as invalid

// Matches logic in React's `shared/ExecutionEnvironment` file

// Memory management.

// NOTE: It's easier to collect rules and have the marker

// NOTE: Remove old styles, then inject the new ones

// NOTE: This does not clear the names, since it's only used during SSR

// NOTE: This registers the componentId, which ensures a consistent order

// NOTE: We use the id as a name as well, since these rules never change

// NOTE: can't memoize this

// NOTE: the non-hooks version only subscribes to this when !componentStyle.isStatic,

// Non-alphabetic chars.

// Normalize the directory name on Windows

// Not indenting methods for history sake; for now.

// Other platforms use non-polling fs_watch.

// Otherwise, pass the action down the middleware chain as usual

// Public methods

// React currently throws a warning when using useLayoutEffect on the server.

// React v16.11 and below

// React v16.12 and above

// Recursively remove children directories / files.

// Rehydrate componentId to group index mapping

// Rehydrate names and rules

// Removes this instance's listeners and closes the underlying fs_watchFile

// Replace globs with equivalent patterns to reduce parsing time.

// Return the exports of the module

// SVG

// SVG-related properties

// Set up default options.

// Shorthands for all valid HTML Elements

// Suitable patterns: `/!(*.d).ts`, `/!(*.d).{ts,tsx}`, `**/!(*-dbg).@(js)`.

// Supply a getter just to skip dealing with ESM bindings

// Suppress event when fs_stat fails, to avoid sending undefined 'stat'

// TODO

// TODO(Babel 8): Remove this file.

// TODO: Strange thing: "should not choke on an ignored watch path" will be failed without 2 ready calls -__-

// TODO: real check

// Test for A's keys different from B.

// Thanks to ReactDOMFactories for this handy list!

// The Entry will either be a directory that just got removed

// The module cache

// The primary entry point assumes we're working with standard ReactDOM/RN, but

// The require function

// The thunk middleware looks for any functions that were passed to `store.dispatch`.

// This action has a similiar effect to ActionTypes.INIT.

// This creates some unlikely edge case issues if the user mixes

// This entry need to be wrapped in an IIFE because it need to be in strict mode.

// This is used to make sure we don't warn about the same

// This leads to an incorrect state if the path was recreated:

// This will create a new entry in the watched object in either case

// To get around it, we can conditionally useEffect on the server (no-op) and

// Use bigint stats if it's windows and stat() supports options (node 10+).

// Use polling on Mac if not using fsevents.

// Verify that the code above has been dead code eliminated (DCE'd).

// We rehydrate only once and use the sheet that is created first

// When a store is created, an "INIT" action is dispatched so that every

// When we have separate strings it's useful to run a progressive

// Workaround for https://github.com/joyent/node/issues/4337

// You’re frozen when your heart’s not open.

// a path may have been filtered out of this readdir, but

// above the current one, create a watcher on the parent

// add is about to be emitted if file not already tracked in parent

// add the linkTarget for watching with a wrapper for transform

// after the actual rules to simplify the rehydration

// alert detecting update of image.

// all SC-specific things should not be hoisted

// ancestor components re-render before descendants

// and are removed from @watched[directory].

// and the statsProp is undefined

// assume we should escape the brackets to match literal characters

// assume we should match with a regex character class

// at-rule

// available, otherwise a store update may happen between render and the effect,

// await alertFromJSX('画像が更新されました。');

// backwards-compatibility

// but absent in previous are added to watch list and

// but never removed from the map in case the path was deleted.

// but present in previous emit `remove` event

// but since JS is single=threaded, we can rely on that to ensure

// but that'd be against the rules-of-hooks. We could be naughty and do it anyway as it

// case the file's watcher misses it (and rely on throttling to de-dupe)

// check if there is already a watcher on a parent path

// checking for BOS characters like "!" and "." (not "./")

// collapse slashes to reduce potential for exploits

// const index = cont.listeners.indexOf(listener);

// convert to absolute path unless relative path already matches

// correct for wrong events emitted

// could have been consolidated by watching one directory

// create a fake namespace object

// create constants based on platform, for windows or posix

// define __esModule on exports

// define getter functions for harmony exports

// determines subdirectory traversal levels from root to path

// documented since Node 10.4.1

// doesn't seem worthwhile for the added complexity.

// don't follow the same symlink more than once

// don't hoist over string (html) components

// don't recurse further if it would exceed depth setting

// emit `add` event.

// emit addDir unless this is a glob parent

// emit an add event if we're supposed to

// emit based on events occurring for files from a directory's watcher in

// encapsulates the subscription logic for connecting a component to the redux store, as

// ensure dir is tracked (harmless if redundant)

// ensure directories are tracked

// ensure empty dirs get tracked

// ensure relativeness of path is preserved in case of watcher reuse

// ensure that win32 namespaces has two leading slashes, so that the path is

// entry may be undefined, because a warning or an error were emitted

// eslint-disable-next-line

// eslint-disable-next-line guard-for-in

// eslint-disable-next-line no-cond-assign

// eslint-disable-next-line no-param-reassign

// evaluate what is at the path we're being asked to watch

// filter out duplicates if specified

// filter out empty strings if specified

// first entry should always have entry.parentDir === EMPTY_STR

// fix negative zero

// flip windows path separators

// fold the underlying StyledComponent rules up (implicit extend)

// fold the underlying StyledComponent target up since we folded the styles

// for frozen objects

// for recursive deleting and cleaning of watched object

// for this component's styles compared to others

// force dynamic classnames if user-supplied stylis plugins are in use

// fs_watch helpers

// functions are allowed to be static if they're just being

// get the location of the block on parent.nodes (block's siblings)

// getDefaultExport function for compatibility with non-harmony modules

// handled properly by the win32 version of path.parse() after being normalized

// https://esbench.com/bench/5bfee68a4cd7e6009ef61d23

// https://github.com/amilajack/eslint-plugin-flowtype-errors/issues/133

// https://github.com/paulmillr/chokidar/blob/e1753ddbc9571bdc33b4a4af172d52cb6e611c10/lib/nodefs-handler.js#L553

// https://msdn.microsoft.com/library/windows/desktop/aa365247(v=vs.85).aspx#namespaces

// if (cont.watcherUnusable) {

// if a path is being added that was previously ignored, stop ignoring it

// if current directory is removed, do nothing

// if it is not a directory, nestedDirectoryChildren will be empty array

// if stats doesn't exist the file must have been deleted

// if the beginning of the glob is "./", advance the start

// if the file is already being watched, do nothing

// if the only watched file is removed, watch for its return

// if what is being deleted is a directory, get that directory's paths

// in case of intersecting globs;

// instance if there are no more listeners left

// instance if there are no more listeners left.

// instances of chokidar, regardless of usage/dependency depth)

// is created synchronously, otherwise a store update may occur before the

// keys multiple times.

// kick off the watcher

// listeners.add(listener);

// looks like: data-styled.g11[id="idA"]{content:"nameA,"}

// minimatch options support

// mode & 16: return value when it's Promise-like

// mode & 1: value is a module id, require it

// mode & 2: merge all properties of value into the ns

// mode & 4: return value when already ns object

// mode & 8|1: behave like require

// modifies `watchPath` to the parent path when it finds a match

// need to check filterPath on dirs b/c filterDir is less restrictive

// no consecutive self refs (.b.b); that is a precedence boost and treated differently

// no module.id needed

// no module.loaded needed

// no need to use broadcast here

// object to hold per-process fs_watch instances

// older versions that do not include `useSyncExternalStore` (React 16.9 - 17.x).

// one more time for any missed in case changes came in extremely quickly

// only need to resolve once

// only push if _both_ are negative...

// optionally relax check

// or _both_ are positive

// or a bogus entry to a file, in either case we have to remove it

// parent watcher

// parse Path string. ExtendScript and Node.js differently deals with directory path.

// parts = [match, selector, content]

// path instead, so that we do consolidate going forward.

// preserve the current depth here since it can't be derived from

// preserve this symlink's target path

// preserves full path in case of trailing path separator

// prevent duplicate handling in case of arriving here nearly simultaneously

// property

// purposes; this is especially important with usage of the css prop

// push symlinks back to the top of the stack to get handled

// rawEmitters.add(rawEmitter);

// real paths past the symlink

// realpath has already been resolved

// rebuild the output if we had to backtrack at any point

// reducer returns their initial state. This effectively populates

// regular expressions

// remove escape chars and return result

// remove path parts that are globby

// remove single star from output

// removes this instance's listeners and closes the underlying fs_watch

// removes this instance's listeners and closes the underlying fsevents

// replace the (invalid) block with it's nodes

// reset "prev" to the first token

// reset output with globstar

// reset previous token to globstar

// reset the cached userIgnored anymatch fn

// returns [context, resolvedAttrs]

// returns boolean indicating whether fsevents can be used

// scan the contents of the dir

// selector

// set aside negated glob strings

// settings in a very weird way, but solving for those cases

// should be an immutable value, but behave for now.

// shouldn't be removed because it matches a different glob

// so that we can continuously output only new rules

// so we got to do the directory check beforehand

// special case for strings ending in enclosure containing path separator

// src/autoBatchEnhancer.ts

// src/configureStore.ts

// src/createAction.ts

// src/createReducer.ts

// src/createSlice.ts

// src/entities/entity_state.ts

// src/getDefaultMiddleware.ts

// src/immutableStateInvariantMiddleware.ts

// src/index.ts

// src/isPlainObject.ts

// src/mapBuilders.ts

// src/nanoid.ts

// src/tsHelpers.ts

// src/utils.ts

// stats is always present

// stats.mode may be bigint

// strip consecutive `/**/`

// stylis has no concept of state to be passed to plugins

// subscription callback always has the selector from the latest render commit

// subscription is created and an inconsistent state may be observed

// suppress unlink events on never before seen files

// that causes emitted paths to incorporate the link's path

// the first self-ref is always untouched

// the initial state tree.

// the new state tree with any relevant data from the old one.

// the same string

// there should be at least two self-refs to do a replacement (.b > .b)

// these properties stay in sync with the current stylis run

// this static is used to preserve the cascade of static classes for component selector

// to make ignoredPaths changes effective

// to the current index, and don't add the "./" characters

// to the state. This greatly simplifies lookbehinds when

// track new directories

// track new paths

// use process.nextTick to allow time for listener to be bound

// useLayoutEffect in the browser. We need useLayoutEffect to ensure the store

// used to get the classname of a nested styled component

// version of djb2 where we pretend that we're still looping over

// via multiple paths (such as _handleFile and _handleDir)

// watch symlink directly (don't follow) and detect changes

// webpackBootstrap

// well as nesting subscriptions of descendant components, so that we can ensure the

// when literal brackets are explicitly disabled

// when literal brackets are explicitly enabled

// when the user specifies nothing, try to match both

// where resolvedAttrs is only the things injected by the attrs themselves

// which may cause missed updates; we also must ensure the store subscription

// will receive the previous state. This effectively populates

// with standard React renderers (ReactDOM, React Native)

// with whatever "extra arg" they want to inject into their thunks

// }

//# sourceMappingURL=immer.esm.js.map

//# sourceMappingURL=styled-components.esm.js.map

//begin to watch placed images.

//const appID = csInterface.getApplicationID();

//if document unsaved any directory, it stops to inspect anymore.

//if the Panel detected unlinked image, it warns.
